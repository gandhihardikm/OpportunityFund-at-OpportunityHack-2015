{
  "name": "node-finance",
  "description": "Financial functions for NodeJS",
  "version": "0.0.3",
  "author": {
    "name": "Rob Hicks",
    "email": "rob@hixfamily.org"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/robhicks/node-finance"
  },
  "main": "./finance.js",
  "scripts": {
    "start": "node test"
  },
  "dependencies": {
    "q": "~0.9.7",
    "lodash": "~2.2.1",
    "moment": "~2.4.0"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-jasmine-node": "~0.1.0",
    "grunt-contrib-watch": "~0.5.3"
  },
  "keywords": [
    "finance",
    "money",
    "amortization",
    "calculate accrued interest",
    "calculate amount financed",
    "calculate months financed",
    "calculate interest",
    "calculate payments",
    "create amortiation table"
  ],
  "licenses": [
    {
      "type": "MIT"
    },
    {
      "type": "GPL2"
    }
  ],
  "bugs": {
    "url": "https://github.com/robhicks/node-finance/issues"
  },
  "license": "MIT",
  "readme": "node-finance\n=========\n\nnode-finance is a Node module that provides basic finance methods. node-finance is implemented\nwhere it can be used synchronously or asynchronously. To use it asynchronously, pass in a callback\nat the end of a function.\n\nFUNCTIONS\n=========\n\n PVofLumpSum\n -----------\n Calculates the present value of a lump sum received in the future. Arguments include:\n * rate (required) - the interest rate per period\n * NPER (required) - total number of periods\n * FV (optional) - the future value or lump sum to be received\n\nPV\n --\n Calculates the present value of an investment resulting from a series of regular payments. Arguments include:\n * rate (required) - the interest rate per period\n * NPER (required) - total number of payment periods\n * PMT (required)  the regular payment made each period\n * type (optional) - wether payments made 0 - at the end of each period or 1 - at the start of each period (including a payment at the start of the term)\n\n PVofPerpetuity\n --------------\n Calculates the present value of an investment with an unlimited number of regular payments. Arguments include:\n * rate (required) - the interest rate per period\n * NPER (required) - total number of payment periods\n * PMT (required)  the regular payment made each period\n\nCUMIPMT\n-------\nCalculate the total interest paid on a loan in specified periodic payments. Arguments include:\n* rate (required) - interest rate specified as a percentage, e.g., 10.5\n* periods (required) - the total number of payment periods in the term\n* pv (required) - the initial sum borrowed\n* start (optional) - the first period to include. Periods are numbered beginning with 1\n* end (optional) - the last period to include\n* type (optional) - when payments are made:\n    - 0 - at the end of each period\n    - 1 - at the start of each period (including a payment at the start of the term)\n* callback (optional) - callback for asynchronous processing using Node's CommonJS format\n\nFV\n--\nCalculates future value of an investment based on equal periodic payments. Arugments include:\n* rate (required) - the periodic interest rate\n* NPER (required) - the number of periods\n* PMT (required) - the equal periodic payments\n* type (optional) - whether the payment is due at the beginning (1) or the end (0) of a period\n\nNPER\n----\nCaculates the number of periods for an investment based on periodic, constant payments\nand a constant interest rate. Arguments include:\n* rate (required) - the periodic interest rate\n* PMT (required) - the constant payment paid in each period\n* FV (required) - the future value of the last period\n* type (optional) - whether the payment is due at the beginning (1) or the end (0) of a period\n\nPMT\n---\nCalculates the payment for a loan with the following parameters.\n* PV is loan amount\n* NPER is the number of periods\n* rate is the rate per period\n* type (optional) - whether the payment is due at the beginning (1) or the end (0) of a period\n\nGenAmortizationSchedule\n-----------------------\nThis function generates an amortization schedule. The schedule is returned as a Javascript object.\n\nThe function accepts the following arguments:\n* amount (required): the starting principal amount of the loan\n* months (required): the number of whole months over which the loan extends\n* rate (required): the annual interest rate of the loan expressed as a percentage, e.g., 10.5\n* firstPaymentDate (optional): the date the first payment will be made\n* frequency (optional): the payment frequency, which can be any of the following:\n    semimonthly - twice a month\n    monthly - once each month\n    bimonthly - every two months\n    quarterly - every quarter\n    semiannually - ever 6 months\n    annually - ever 12 months\n    none or one - only one payment at the end of the loan - typically don't mix this with balloonDate\n* balloonDate (optional): the date a balloon payment will be made. This date will be forced to earliest\ncorresponding payment date. This date will be ignored if it is greater than the term (months) of the\nloan.\n\nThe return object contains an array, with each array element containing the following fields:\n* paymentNumber - the number for a payment\n* principle: the principal balance remaining at the end of the period\n* accumulatedInterest: the interest accumulate from all previous periods through this period\n* payment: the periodic payment the borrower is required to pay\n* paymentToPrinciple: the amount of the payment allocated to paying down the principal\n* paymentToInterest: the amount of the payment allocated to paying interest\n* date: the date of the payment for the period\n\npayments\n--------\nCalculates the number of payments for a loan. This is different than NPER.\nNPER calculates the number of periods used in an annuity or loan from\na financial perspective. This function looks at how frequently a customer\nchooses to make payments. This function has the following arguments:\n    * NPER (required) - the number of periods used in calculating interest for a loan\n    * frequency (optional): the payment frequency, which can be any of the following:\n         - semimonthly - twice a month\n         - monthly - once each month\n         - bimonthly - every two months\n         - quarterly - every quarter\n         - semiannually - ever 6 months\n         - annually - ever 12 months\n         - none or one - only one payment at the end of the loan - typically don't mix this with balloonDate",
  "readmeFilename": "README.md",
  "_id": "node-finance@0.0.3",
  "dist": {
    "shasum": "a7c2425796d13ff4bcba285afd83ccb3244237f2",
    "tarball": "http://registry.npmjs.org/node-finance/-/node-finance-0.0.3.tgz"
  },
  "_from": "node-finance@*",
  "_npmVersion": "1.3.6",
  "_npmUser": {
    "name": "robhicks",
    "email": "rob@hixfamily.org"
  },
  "maintainers": [
    {
      "name": "robhicks",
      "email": "rob@hixfamily.org"
    }
  ],
  "directories": {},
  "_shasum": "a7c2425796d13ff4bcba285afd83ccb3244237f2",
  "_resolved": "https://registry.npmjs.org/node-finance/-/node-finance-0.0.3.tgz",
  "homepage": "https://github.com/robhicks/node-finance"
}
